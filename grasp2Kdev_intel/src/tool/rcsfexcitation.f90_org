!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! RCSFEXCITATION
!
! This program generates excitation input to rcsfgenerate
!
! Per Jonsson, Malmo University, October 2013
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

program rcsfexcitation
implicit none
integer            :: i,k,j,nmax,lmax,mr,n(15),l(15),occ(15),nr,lr,occr,nl(0:15)
integer            :: jmin,jmax,nexc,occupied,ncore,nstart(0:6),lstart(0:6)
integer            :: nc(6),lc(6),ncoreloop,nclose,nincore(15),lincore(15)
integer            :: conflength,norb,orblength(15),orbstart(0:15),flag(15)
integer            :: number1,number2

character(len=1)   :: lstring,ans
character(len=2)   :: sel(15)
character(len=135) :: config
character(len=135) :: configvect(100)
character(len=11)  :: decoding

decoding = 'spdfghiklmn'

open(11, file='excitationdata',status='unknown',form='formatted')
open(12, file='rcsfexcitation.log',status='unknown',form='formatted')

n = 0
l = 0
nincore = 0
lincore = 0
occ = 0

write(*,*) 
write(*,*) 'RCSFEXCITATION'
write(*,*) 'This program creates excitation input to RCSFGENERATE'
write(*,*) 'Configurations should be entered in spectroscopic notation'
write(*,*) 'with occupation numbers and indications if orbitals are'
write(*,*) 'closed (c), inactive (i), active (*) or has a minimal'
write(*,*) 'occupation e.g. 1s(2,1)2s(2,*)'
write(*,*) 'Outputfiles: excitationdata, rcsfexcitation.log'
write(*,*) 
write(*,*) 'Select core '
write(*,*) '       0: No core'
write(*,*) '       1: He (       1s(2)                  =  2 electrons)'
write(*,*) '       2: Ne ([He] + 2s(2)2p(6)             = 10 electrons)'
write(*,*) '       3: Ar ([Ne] + 3s(2)3p(6)             = 18 electrons)'
write(*,*) '       4: Kr ([Ar] + 3d(10)4s(2)4p(6)       = 36 electrons)'
write(*,*) '       5: Xe ([Kr] + 4d(10)5s(2)5p(6)       = 54 electrons)'
write(*,*) '       6: Rn ([Xe] + 4f(14)5d(10)6s(2)6p(6) = 86 electrons)'
read(*,*) ncore
write(12,*) ncore, ' ! Selected core'

! Input the mutirefernce for later processing

write(*,*) 'Number of reference configurations '
read(*,*) mr
write(12,*) mr, ' ! Number of reference configurations'
if (mr.gt.100) then
   write(*,*) 'No more than 100 reference configurations '
   stop
end if

do j = 1,mr

10 continue
   write(*,*) 'Give configuration', j
   read(*,'(a)') configvect(j)
   write(12,'(a)') trim(configvect(j))

!  Initial check, each orbital need to be closed, inactive, or minimal

   conflength = len(trim(configvect(j)))
   number1 = 0
   number2 = 0
   do k = 1,conflength
      if (configvect(j)(k:k).eq.'(') number1 = number1 + 1 
      if (configvect(j)(k:k).eq.',') number2 = number2 + 1 
   end do
   if (number1.ne.number2) then
      write(*,*)  'Each orbital must be closed (c), inactive (i), active (*)'
      write(*,*)  'or have a minimal occupation; redo!'
      goto 10
   end if

end do

! Generate initial input to jjgen

! New list
write(11,'(a)') '*'

! Default symmetry
write(11,'(a)') '*'

write(*,*) 'Give highest n for orbital set'
read(*,*) nmax
write(12,*) nmax, ' ! Highest n for orbital set'
write(*,*) 'Give highest l for orbital set in spectroscopic notation e.g. h'
read(*,*) lstring
write(12,'(2a)') lstring, '             ! Highest l for orbital set in spectroscopic notation'

select case(lstring)
   case('s')
      lmax = 0
   case('p')
      lmax = 1
   case('d')
      lmax = 2
   case('f')
      lmax = 3
   case('g')
      lmax = 4
    case('h')
      lmax = 5
   case('i')
      lmax = 6
   case('k') 
      lmax = 7
   case('l')
      lmax = 8
   case('m')
      lmax = 9
   case('n')
      lmax = 10
   case default
      write(*,*) 'Orbital quantum numbers should be in range s to n'
      stop
end select

do i = 0,lmax
   write(*,'(a)') ' Give highest n for orbital symmetry '//decoding(i+1:i+1)
   read(*,*) nl(i)
   write(12,*) nl(i), ' ! Highest n for orbital symmetry '//decoding(i+1:i+1)
end do

if (lmax.ge.nmax) then
   write(*,*) 'Orbital quantum number should be less than n'
   stop
end if

write(*,*) 'Resulting 2*J-number? lower, higher (J=1 -> 2*J=2 etc.)'
read(*,*) jmin,jmax
write(12,*) jmin,jmax, ' ! Lower and higher 2*J'
write(*,*) 'Number of excitations '
read(*,*) nexc
write(12,*) nexc, ' ! Number of excitations '

do j = 1,mr

! Highest principal quantum number
   write(11,*) nmax

! Highest orbital quantum number
   write(11,'(a)') lstring

! All these orbitals active
   write(11,'(a)') 'n'

! Limitations of population
   write(11,'(a)') '*'

   config = configvect(j)

! Analyze config and extract n, l and occupation

   ! Determine length of orbit substrings. Depends on number of positions
   ! that occupation and type indicator occupies.
   conflength = len(trim(config))
   k = 0
   orbstart(0) = 0
   do i = 1, conflength
      if(config(i:i).eq.')') then
         k = k + 1
         orblength(k) = i - orbstart(k-1)
         orbstart(k) = i
      end if
   end do
   norb = k  ! Number of orbit substrings in configuration

   flag(:) = 0
   do k = 1,norb
      i = 1+orbstart(k-1)
      if(config(i+4:i+4).eq.',') flag(k) = 1 ! Flag to facilitate determination if  
                                             ! occupation/type indicator occupies one/two positions
      select case(config(i:i))
         case('1')
            nr = 1
         case('2')
            nr = 2
         case('3')
            nr = 3
         case('4')
            nr = 4
         case('5')
            nr = 5
         case('6')
            nr = 6
         case('7')
            nr = 7
         case('8')
            nr = 8
         case('9')
            nr = 9
      end select

      select case(config(i+1:i+1))
         case('s')
            lr = 0
         case('p')
            lr = 1
         case('d')
            lr = 2
         case('f')
            lr = 3
         case('g')
            lr = 4
         case('h')
            lr = 5
         case('i')
            lr = 6
         case('k')
            lr = 7
         case('l')
            lr = 8
      end select

      ! If occupation number "occupies" one position
      if(flag(k).eq.1) then
         select case(config(i+3:i+3))
           case('1')
              occr = 1
           case('2')
              occr = 2
           case('3')
              occr = 3
           case('4')
              occr = 4
           case('5')
              occr = 5
           case('6')
              occr = 6
           case('7')
              occr = 7
           case('8')
              occr = 8
           case('9')
              occr = 9
          end select
      else
         select case(config(i+3:i+4))
           case(' 1')
              occr = 1
           case(' 2')
              occr = 2
           case(' 3')
              occr = 3
           case(' 4')
              occr = 4
           case(' 5')
              occr = 5
           case(' 6')
              occr = 6
           case(' 7')
              occr = 7
           case(' 8')
              occr = 8
           case(' 9')
              occr = 9
           case('10')
              occr = 10
           case('11')
              occr = 11
           case('12')
              occr = 12
           case('13')
              occr = 13
           case('14')
              occr = 14
          end select
       end if
      if (nr.gt.nmax) then
         write(*,*) 'n in config greater than nmax'
         stop
      end if

      n(k) = nr
      l(k) = lr
      occ(k) = occr
      ! Determine start position and number of positions for type indicator
      if(orblength(k).eq.7) then
         sel(k) = config(i+5:i+5)
      elseif((orblength(k).eq.8).and.(flag(k).eq.0)) then
         sel(k) = config(i+6:i+6)
      elseif((orblength(k).eq.8).and.(flag(k).eq.1)) then
         sel(k) = config(i+5:i+6)
      else
         sel(k) = config(i+6:i+7)
      end if
      if (j.eq.1) then
         if (trim(adjustl(sel(k))).eq.'c') then
            nincore(k) = nr
            lincore(k) = lr
         end if
      end if 
   end do

! Generate input to jjgen from this configuration

! Highest n for reference configuration
   write(11,*) maxval(n)

! Predefined core

   if (j.eq.1) then
      if (ncore.eq.0) then
         write(11,'(a)') '*'
      else
         write(11,'(a)') 'c'
         write(11,*) ncore
      end if 
   end if

! Loop over orbitals that can define the reference. Pay attention to how the core is defined

   select case(ncore)
      case(3)
         ncoreloop = 1
         nc(1) = 3
         lc(1) = 2
      case(4)
         ncoreloop = 2
         nc(1) = 4
         nc(2) = 4
         lc(1) = 2
         lc(2) = 3
      case(5) 
         ncoreloop = 4
         nc(1) = 4
         nc(2) = 5
         nc(3) = 5
         nc(4) = 5
         lc(1) = 3
         lc(2) = 2
         lc(3) = 3
         lc(4) = 4
      case(6)
         ncoreloop = 6
         nc(1) = 5
         nc(2) = 5
         nc(3) = 6
         nc(4) = 6
         nc(5) = 6
         nc(6) = 6
         lc(1) = 3
         lc(2) = 4
         lc(3) = 2
         lc(4) = 3
         lc(5) = 4
         lc(6) = 5
   end select
        
   do i = 1,ncoreloop
      nr = nc(i)
      lr = lc(i) 

! Check if this orbital was previously defined as closed. If so do not write anything for this

      nclose = 0
      if (j.gt.1) then
         do k = 1,15
            if ((nr.eq.nincore(k)).and.(lr.eq.lincore(k))) nclose = 1
         end do
      end if
      if (nclose.eq.1) cycle

      occupied = 0

! Find out occupation and options for this orbital

      do k = 1,norb
          if ((nr.eq.n(k)).and.(lr.eq.l(k))) then
             write(11,*) occ(k)
             write(11,'(a)') trim(adjustl(sel(k)))
             occupied = 1
          end if
      end do
      if (occupied.eq.0) then
          write(11,*) 0
          write(11,'(a)') '*'
      end if
   end do

   do nr = ncore+1,maxval(n)
      do lr = 0,min(nr-1,lmax)

! Check if this orbital was previously defined as closed. If so do not write anything for this

          nclose = 0
          if (j.gt.1) then
             do k = 1,15
                if ((nr.eq.nincore(k)).and.(lr.eq.lincore(k))) nclose = 1
             end do
          end if
          if (nclose.eq.1) cycle

! Find out occupation and options for this orbital

          occupied = 0
          do k = 1, norb
             if ((nr.eq.n(k)).and.(lr.eq.l(k))) then
                write(11,*) occ(k)
                write(11,'(a)') trim(adjustl(sel(k)))
                occupied = 1
             end if
          end do
          if (occupied.eq.0) then
             write(11,*) 0
             write(11,'(a)') '*'
          end if

      end do
   end do

! Loop over remaining orbitals in the orbital set

   if (nmax.gt.maxval(n)) then
      do nr = maxval(n)+1,nmax
         do lr = 0,min(nr-1,lmax)
            if (nr.le.nl(lr)) then
               write(11,'(a)') '*'
            else
               write(11,'(a)') 'i'
            end if
         end do
      end do
   end if

! Write JMIN, JMAX and number of excitations

   write(11,*) jmin,jmax
   write(11,*) nexc

   if (j.ne.mr) then
      write(11,'(a)') 'y'
   else
      write(11,'(a)') '*'
   end if

end do

close(11)

end program rcsfexcitation


