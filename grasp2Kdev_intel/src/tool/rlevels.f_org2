      PROGRAM grlevels
************************************************************************
* Purpose:
* Extract energy levels from rscf/rci output files (.m, .cm file).
* And then:
*   (1) sort
*   (2) difference with the lowest
*   (3) difference with the nearby lower
* Files names are provided by user.
* Usage:
*   $ grlevels file1 file2 file3 ...
*       or
*   $ grlevels
*   file1
*   file2
*   file3
*   ... (return to terminate)
*
* Xinghong He
* 98-10-16
************************************************************************
*
*
      IMPLICIT NONE
      include 'parameters.def'
CGG      INTEGER, PARAMETER:: JMax = 10		! max J value, see JFraction !
      INTEGER, PARAMETER:: JMax = 22		! max J value, see JFraction !
      INTEGER, PARAMETER:: ndim = 20000		! max number of states
      INTEGER, PARAMETER:: maxFile = 1000  ! max number of files 
      DOUBLE PRECISION, PARAMETER:: Rydberg = 109737.31534D0
      CHARACTER(LEN=80) strInFile(maxFile), strFile
      CHARACTER*1 iaspa(ndim), PlusMinus(-1:1)   ! Parity
      CHARACTER*4 iatjp(ndim), JFraction(1:2*Jmax+1)   ! J
      INTEGER ivec(ndim), indx(ndim)
      DOUBLE PRECISION eav, eval(ndim), evec
      INTEGER i, j, iargc, ios, ncountState, nFile, mFile
      INTEGER nelec, ncftot, nw, nvectot, nvecsiz, nblock, jblock
      INTEGER nb, ncfblk, nevblk, iiatjp, iiaspa
      CHARACTER g92mix*6
      DATA PlusMinus/'-', ' ', '+'/
      DATA JFraction/'  0 ', ' 1/2', '  1 ', ' 3/2', '  2 ', ' 5/2',
     &               '  3 ', ' 7/2', '  4 ', ' 9/2', '  5 ', '11/2',
     &               '  6 ', '13/2', '  7 ', '15/2', '  8 ', '17/2',
     &               '  9 ', '19/2', ' 10 ',
     &                       '21/2', ' 11 ', '23/2', ' 12 ', '25/2',
     &               ' 13 ', '27/2', ' 14 ', '29/2', ' 15 ', '31/2',
     &               ' 16 ', '33/2', ' 17 ', '35/2', ' 18 ', '37/2',
     &               ' 19 ', '39/2', ' 20 ', '41/2', ' 21 ', '43/2',
     &               ' 22 '/
CGG     &               '  9 ', ' 1/2', ' 10 '/

      mFile = iargc()

      IF (mFile .EQ. 0) THEN			! Get file names interactively
         WRITE (0,*)'  You can also use command-line option:'
         WRITE (0,*)'    %grlevels file1 file2 (wild cards allowed)...'
         WRITE (0,*)'  Now, carry on'
         WRITE (0,*)
         WRITE (0,*)'Type the input file name, one for each line',
     &            ' (NULL to terminate)'
         WRITE (0,*)

         i = 0
         DO  ! Don't know the exact number of files.
            WRITE (0,'(A12)', ADVANCE='NO') 'File name ? '
            READ (5, '(A80)') strFile
            strFile = ADJUSTL (strFile)
            IF (LEN_TRIM (strFile) .GT. 0) THEN ! a valid input
               i = i + 1
               IF (i .GT. maxFile) THEN      !  impose an upper limit
                  WRITE (0,*) 'Too many files opened. processing first '
     &                       , i-1, ' files.'
                  EXIT
               ENDIF
               strInFile(i) = strFile
            ELSE
               EXIT
            ENDIF
         ENDDO

         mFile = i 

      ELSEIF (mFile .GT. 0 .AND. mFile .LE. maxFile) THEN
         DO i = 1, mFile
            CALL getarg (i, strInFile(i))
         ENDDO
      ELSE
         WRITE (0,*) 'More than ', maxFile, ' files entered,',
     &            ' modify parameter maxFile'
      ENDIF

!      DO i = 1, mFile
!         WRITE (6, '(I3, 1X, A)') i, 
!     &         strInFile(i)(1:LEN_TRIM(strInFile(i)))
!      ENDDO

* Open files, read energies, concatenate to a single place

************************************************************************
*  Open mix file, check header
************************************************************************
      ncountState = 0
      DO nFile = 1, mFile
         strFile = strInFile(nFile)
         OPEN (3, FILE = strFile, FORM = 'UNFORMATTED', STATUS = 'OLD'
     &      , IOSTAT = IOS)
         IF (IOS .NE. 0) THEN
            WRITE (0,*) 'Failed to open file "', 
     &                strFile(1:LEN_TRIM (strFile)), '", skipping...'
            CLOSE (3)
            CYCLE
         ENDIF

         READ (3) g92mix
         IF (g92mix .NE. 'G92MIX') THEN
            WRITE (0,*) 'Not a mixing coefficient file, skipping "',
     &                strFile(1:LEN_TRIM (strFile)), '"'
            
            CLOSE (3)
            CYCLE
         ENDIF

         READ (3) nelec, ncftot, nw, nvectot, nvecsiz, nblock

         PRINT *, 'nblock = ', nblock, '  ncftot = ', ncftot, 
     &                '  nw = ', nw, '  nelec = ', nelec

         DO jblock = 1, nblock
            READ (3) nb, ncfblk, nevblk, iiatjp, iiaspa
            IF (jblock .NE. nb) THEN
               ! This error can occur anywhere and therefore cannot 
               ! be simply skipped - stop instead.
               WRITE (0,*) 'jblock .NE. nb, stopping...'
               CLOSE (3)
               STOP
            ENDIF
            IF (nevblk .LE. 0) CYCLE
            READ (3) (ivec(i+ncountState), i = 1, nevblk)
            READ (3) eav, (eval(i+ncountState), i = 1, nevblk)
*
* Eigenvector not considered
*
*            READ (3) ((evec(i + (j-1)*ncfblk ), 
*     &                  i = 1, ncfblk), j = 1, nevblk)
            READ (3) (evec, i = 1, ncfblk*nevblk)
            ! Assign J and parity to every individual state
            ! Also add the average energy (back) to energy
            DO i = 1, nevblk
               iatjp(i+ncountState) = JFraction(iiatjp)
               iaspa(i+ncountState) = PlusMinus(iiaspa)
               eval(i+ncountState) = eval(i+ncountState) + eav
            ENDDO
            ! Update ncountState
            ncountState = ncountState + nevblk
         ENDDO
         CLOSE (3)
      ENDDO

      !PRINT *, 'Total number of states: ', ncountState

      CALL index (ncountState, eval, .FALSE., indx)

      PRINT *
      WRITE (6,*) 'Energy levels for ...'
      WRITE (6,10) Rydberg
   10 FORMAT (' Rydberg constant is ',F14.5)
      WRITE (6,*) 'No - Serial number of the state; ',
     &            'Pos - Position of the state within the '
      WRITE (6,*) 'J/P block; Splitting is the energy difference ',
     &            'with the lower neighbor'
      WRITE (6,*) '------------------------------------------',
     &            '-------------------------------'
      WRITE (6,*) 'No Pos  J Parity Energy Total    Levels',
     &          '     Splitting '
      WRITE (6,*) '                     (a.u.)      (cm^-1)',
     &          '     (cm^-1)'
      WRITE (6,*) '------------------------------------------',
     &            '-------------------------------'
         j = 1
         i = indx(j)
CGG         WRITE (6,'(2I3, 1X, A4, 1x, A1, 2X, F14.7, F12.2, F12.2)') 
         WRITE (6,'(I4,I3, 1X, A4, 1x, A1, 2X, F14.7, F12.2, F12.2)') 
     &      j, ivec(i), iatjp(i), iaspa(i), eval(i)
      DO j = 2, ncountState
         i = indx(j)
CGG         WRITE (6,'(2I3, 1X, A4, 1x, A1, 2X, F14.7, F12.2, F12.2)') 
         WRITE (6,'(I4,I3, 1X, A4, 1x, A1, 2X, F14.7, F12.2, F12.2)') 
     &      j, ivec(i), iatjp(i), iaspa(i), eval(i), 
     &      (eval(i)-eval(indx(1)))*Rydberg*2, 
     &      (eval(i)-eval(indx(j-1)))*Rydberg*2
      ENDDO
      WRITE (6,*) '------------------------------------------',
     &            '-------------------------------'

      END
!NewPage !^L
! new routine begins here index
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c                     index
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE index(n,a,ldown,indx)
      IMPLICIT NONE
!$Id: rlevels.f,v 1.2 2003/10/02 07:56:22 per Exp $
!$Log: rlevels.f,v $
!Revision 1.2  2003/10/02 07:56:22  per
!*** empty log message ***
!
!Revision 1.1.1.1  2003/01/04 21:45:39  georgio
!import all
!
      CHARACTER*(*)    RCSID
      PARAMETER        ( RCSID
     & ='$Id: rlevels.f,v 1.2 2003/10/02 07:56:22 per Exp $'
     & )
      LOGICAL          ldown              ! .TRUE. then Big ---> Small
      INTEGER          n, indx(n)
      DOUBLE PRECISION a(n)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
! Sort out the order of array a and store the index in indx (a pointer)
! The input array a is unchanged
! written in the bases of UpDown
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      INTEGER          i, j, ipos, jpos, jhere
      DOUBLE PRECISION aimx

      ! Initialize the index array
      DO i = 1, n
         indx(i) = i
      ENDDO

      IF (ldown) THEN
         DO i = 1, n
            ipos = indx(i)
            aimx = a(ipos)
            jhere = i
            DO j = i+1, n
               jpos = indx(j)
               IF(a(jpos) .GT. aimx) THEN
                  aimx = a(jpos)
                  jhere = j
               ENDIF
            ENDDO
            indx(i) = indx(jhere)
            indx(jhere) = ipos
         ENDDO
      ELSE
         DO i = 1, n
            ipos = indx(i)
            aimx = a(ipos)
            jhere = i
            DO j = i+1, n
               jpos = indx(j)
               IF(a(jpos) .LT. aimx) THEN
	               aimx = a(jpos)
                  jhere = j
               ENDIF
            ENDDO
            indx(i) = indx(jhere)
            indx(jhere) = ipos
         ENDDO
      ENDIF
      RETURN
      END
